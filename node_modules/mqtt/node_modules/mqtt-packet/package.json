{
  "name": "mqtt-packet",
  "version": "5.2.0",
  "description": "Parse and generate MQTT packets like a breeze",
  "main": "mqtt.js",
  "contributors": [
    {
      "name": "Matteo Collina",
      "email": "matteo.collina@gmail.com",
      "url": "https://github.com/mcollina"
    },
    {
      "name": "Adam Rudd",
      "email": "damvrr@gmail.com"
    }
  ],
  "scripts": {
    "test": "tape test.js | tap-spec && standard",
    "ci": "tape test.js && node testRandom && standard"
  },
  "pre-commit": "test",
  "repository": {
    "type": "git",
    "url": "https://github.com/mqttjs/mqtt-packet.git"
  },
  "keywords": [
    "MQTT",
    "packet",
    "parse",
    "publish",
    "subscribe",
    "pubsub"
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mqttjs/mqtt-packet/issues"
  },
  "homepage": "https://github.com/mqttjs/mqtt-packet",
  "devDependencies": {
    "dev-null": "^0.1.1",
    "pre-commit": "^1.1.3",
    "readable-stream": "^2.1.5",
    "standard": "^8.1.0",
    "tap-spec": "^4.1.1",
    "tape": "^4.6.0"
  },
  "dependencies": {
    "bl": "^1.1.2",
    "inherits": "^2.0.3",
    "process-nextick-args": "^1.0.7"
  },
  "readme": "mqtt-packet&nbsp;&nbsp;&nbsp;[![Build Status](https://travis-ci.org/mqttjs/mqtt-packet.png)](https://travis-ci.org/mqttjs/mqtt-packet)\n===========\n\nEncode and Decode MQTT 3.1.1 packets the node way.\n\n[![JavaScript Style Guide](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n\n  * <a href=\"#install\">Installation</a>\n  * <a href=\"#examples\">Examples</a>\n  * <a href=\"#packets\">Packets</a>\n  * <a href=\"#api\">API</a>\n  * <a href=\"#contributing\">Contributing</a>\n  * <a href=\"#license\">Licence &amp; copyright</a>\n\nThis library is tested with node v4 and v6. The last version to support\nolder versions of node was mqtt-packet@4.1.2.\n\nInstallation\n------------\n\n```bash\nnpm install mqtt-packet --save\n```\n\nExamples\n--------\n\n### Generating\n\n```js\nvar mqtt = require('mqtt-packet')\nvar object = {\n  cmd: 'publish',\n  retain: false,\n  qos: 0,\n  dup: false,\n  length: 10,\n  topic: 'test',\n  payload: 'test' // Can also be a Buffer\n}\n\nconsole.log(mqtt.generate(object))\n// Prints:\n//\n// <Buffer 30 0a 00 04 74 65 73 74 74 65 73 74>\n//\n// Which is the same as\n//\n// new Buffer([\n//   48, 10, // Header\n//   0, 4, // Topic length\n//   116, 101, 115, 116, // Topic (test)\n//   116, 101, 115, 116 // Payload (test)\n// ])\n```\n\n### Parsing\n\n```js\nvar mqtt = require('mqtt-packet')\nvar parser = mqtt.parser()\n\n// Synchronously emits all the parsed packets\nparser.on('packet', function(packet) {\n  console.log(packet)\n  // Prints:\n  //\n  // {\n  //   cmd: 'publish',\n  //   retain: false,\n  //   qos: 0,\n  //   dup: false,\n  //   length: 10,\n  //   topic: 'test',\n  //   payload: <Buffer 74 65 73 74>\n  // }\n})\n\nparser.parse(new Buffer([\n  48, 10, // Header\n  0, 4, // Topic length\n  116, 101, 115, 116, // Topic (test)\n  116, 101, 115, 116 // Payload (test)\n])\n// Returns the number of bytes left in the parser\n```\n\nAPI\n---\n\n  * <a href=\"#generate\"><code>mqtt#<b>generate()</b></code></a>\n  * <a href=\"#writeToStream\"><code>mqtt#<b>writeToStream()</b></code></a>\n  * <a href=\"#parser\"><code>mqtt#<b>parser()</b></code></a>\n\n<a name=\"generate\">\n### mqtt.generate(object)\n\nGenerates a `Buffer` containing an MQTT packet.\nThe object must be one of the ones specified by the [packets](#packets)\nsection. Throws an `Error` if a packet cannot be generated.\n\n<a name=\"writeToStream\">\n### mqtt.writeToStream(object, stream)\n\nWrites the mqtt packet defined by `object` to the given stream.\nThe object must be one of the ones specified by the [packets](#packets)\nsection. Emits an `Error` on the stream if a packet cannot be generated.\nOn node >= 12, this function automatically calls `cork()` on your stream,\nand then it calls `uncork()` on the next tick.\n\n<a name=\"parser\">\n### mqtt.parser()\n\nReturns a new `Parser` object. `Parser` inherits from `EventEmitter` and\nwill emit:\n\n  * `packet`, when a new packet is parsed, according to\n    [packets](#packets)\n  * `error`, if an error happens\n\n<a name=\"parse\">\n#### Parser.parse(buffer)\n\nParse a given `Buffer` and emits synchronously all the MQTT packets that\nare included. Returns the number of bytes left to parse.\n\nIf an error happens, an `error` event will be emitted, but no `packet` events\nwill be emitted after that. Calling `parse()` again clears the error and\nprevious buffer as if you created a new `Parser`.\n\nPackets\n-------\n\nThis section describes the format of all packets emitted by the `Parser`\nand that you can input to `generate`.\n\n### Connect\n\n```js\n{\n  cmd: 'connect',\n  protocolId: 'MQTT', // Or 'MQIsdp' in MQTT 3.1.1\n  protocolVersion: 4, // Or 3 in MQTT 3.1\n  clean: true, // Can also be false\n  clientId: 'my-device',\n  keepalive: 0, // Seconds which can be any positive number, with 0 as the default setting\n  username: 'matteo',\n  password: new Buffer('collina'), // Passwords are buffers\n  will: {\n    topic: 'mydevice/status',\n    payload: new Buffer('dead') // Payloads are buffers\n  }\n}\n```\n\nIf `protocolVersion` is 3, `clientId` is mandatory and `generate` will throw if\nmissing.\n\nIf `password` or `will.payload` are passed as strings, they will\nautomatically be converted into a `Buffer`.\n\n### Connack\n\n```js\n{\n  cmd: 'connack',\n  returnCode: 0, // Or whatever else you see fit\n  sessionPresent: false // Can also be true.\n}\n```\n\nThe only mandatory argument is `returnCode`, as `generate` will throw if\nmissing.\n\n### Subscribe\n\n```js\n{\n  cmd: 'subscribe',\n  messageId: 42,\n  subscriptions: [{\n    topic: 'test',\n    qos: 0\n  }]\n}\n```\n\nAll properties are mandatory.\n\n### Suback\n\n```js\n{\n  cmd: 'suback',\n  messageId: 42,\n  granted: [0, 1, 2, 128]\n}\n```\n\nAll the granted qos __must__ be < 256, as they are encoded as UInt8.\nAll properties are mandatory.\n\n### Unsubscribe\n\n```js\n{\n  cmd: 'unsubscribe',\n  messageId: 42,\n  unsubscriptions: [\n    'test',\n    'a/topic'\n  ]\n}\n```\n\nAll properties are mandatory.\n\n### Unsuback\n\n```js\n{\n  cmd: 'unsuback',\n  messageId: 42\n}\n```\n\nAll properties are mandatory.\n\n### Publish\n\n```js\n{\n  cmd: 'publish',\n  messageId: 42,\n  qos: 2,\n  dup: false,\n  topic: 'test',\n  payload: new Buffer('test'),\n  retain: false\n}\n```\n\nOnly the `topic` and properties are mandatory\nBoth `topic` and `payload` can be `Buffer` objects instead of strings.\n`messageId` is mandatory for `qos > 0`.\n\nIf `payload` is passed to `generate(packet)` as a string, it will be\nautomatically converted into a `Buffer`.\n\n### Puback\n\n```js\n{\n  cmd: 'puback',\n  messageId: 42\n}\n```\n\nThe only mandatory argument is `messageId`, as `generate` will throw if\nmissing.\n\n### Pubrec\n\n```js\n{\n  cmd: 'pubcomp',\n  messageId: 42\n}\n```\n\nThe only mandatory argument is `messageId`, as `generate` will throw if\nmissing.\n\n### Pubrel\n\n```js\n{\n  cmd: 'pubrel',\n  messageId: 42\n}\n```\n\nThe only mandatory argument is `messageId`, as `generate` will throw if\nmissing.\n\n### Pubcomp\n\n```js\n{\n  cmd: 'pubcomp',\n  messageId: 42\n}\n```\n\nThe only mandatory argument is `messageId`, as `generate` will throw if\nmissing.\n\n### Pingreq\n\n```js\n{\n  cmd: 'pingreq'\n}\n```\n\n### Pingresp\n\n```js\n{\n  cmd: 'pingresp'\n}\n```\n\n### Disconnect\n\n```js\n{\n  cmd: 'pingresp'\n}\n```\n\n<a name=\"contributing\"></a>\nContributing\n------------\n\nmqtt-packet is an **OPEN Open Source Project**. This means that:\n\n> Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.\n\nSee the [CONTRIBUTING.md](https://github.com/mqttjs/mqtt-packet/blob/master/CONTRIBUTING.md) file for more details.\n\n### Contributors\n\nmqtt-packet is only possible due to the excellent work of the following contributors:\n\n<table><tbody>\n<tr><th align=\"left\">Matteo Collina</th><td><a href=\"https://github.com/mcollina\">GitHub/mcollina</a></td><td><a href=\"http://twitter.com/matteocollina\">Twitter/@matteocollina</a></td></tr>\n<tr><th align=\"left\">Adam Rudd</th><td><a href=\"https://github.com/adamvr\">GitHub/adamvr</a></td><td><a href=\"http://twitter.com/adam_vr\">Twitter/@adam_vr</a></td></tr>\n<tr><th align=\"left\">Peter Sorowka</th><td><a href=\"https://github.com/adamvr\">GitHub/psorowka</a></td><td><a href=\"http://twitter.com/psorowka\">Twitter/@psorowka</a></td></tr>\n</tbody></table>\n\nLicense\n-------\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "mqtt-packet@5.2.0",
  "_from": "mqtt-packet@^5.0.0"
}
